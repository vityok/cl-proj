<?xml version="1.0" encoding="UTF-8"?>
<documentation single-page-p="yes" index-title="Common Lisp geographic projections API reference" css="index.css" heading="Proj.4 wrapper for Lisp"><package name="cl-proj" id="cl-proj"><documentation-string>no documentation string found</documentation-string><external-symbols><function-definition id="cl-proj__fun__pj-malloc" name="pj-malloc" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__dms-to-dec" name="dms-to-dec" package="cl-proj"><lambda-list><elt>deg</elt><elt>&amp;optional</elt><elt>(min 0.0d0)</elt><elt>(sec 0.0d0)</elt></lambda-list><documentation-string>Converts a degree-minute-second representation to decimal
degrees.<break/>
For example, to convert 47°7'50.09 to decimal representation, call
this function with following parameters:<break/><code>
  (dms-to-dec 47 7 50.9) =&gt; 47.130802</code></documentation-string></function-definition><function-definition id="cl-proj__fun__pj-init" name="pj-init" package="cl-proj"><lambda-list><elt>arg0</elt><elt>arg1</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-inv" name="pj-inv" package="cl-proj"><lambda-list><elt>arg0</elt><elt>arg1</elt></lambda-list><documentation-string>Inverse cartographic projection.</documentation-string></function-definition><function-definition id="cl-proj__fun__pj-acquire-lock" name="pj-acquire-lock" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun__pj-geocentric-to-geodetic" name="pj-geocentric-to-geodetic" package="cl-proj"><lambda-list><elt>a</elt><elt>es</elt><elt>point_count</elt><elt>point_offset</elt><elt>x</elt><elt>y</elt><elt>z</elt></lambda-list></function-definition><variable-definition id="cl-proj__variable__+rad-to-deg+" name="+rad-to-deg+" package="cl-proj"/><function-definition id="cl-proj__fun__pj-apply-gridshift" name="pj-apply-gridshift" package="cl-proj"><lambda-list><elt>arg0</elt><elt>arg1</elt><elt>point_count</elt><elt>point_offset</elt><elt>x</elt><elt>y</elt><elt>z</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-geodetic-to-geocentric" name="pj-geodetic-to-geocentric" package="cl-proj"><lambda-list><elt>a</elt><elt>es</elt><elt>point_count</elt><elt>point_offset</elt><elt>x</elt><elt>y</elt><elt>z</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-release-lock" name="pj-release-lock" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun__pj-set-finder" name="pj-set-finder" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-is-geocent" name="pj-is-geocent" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-init-plus" name="pj-init-plus" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list><documentation-string>Convert a string representation of a coordinate system definition
into an internal representation.<break/>
This function converts a string representation of a coordinate system
definition into a projPJ object suitable for use with other API
functions. On failure the function will return NULL and set
pj_errno. The definition should be of the general form "+proj=tmerc
+lon_0 +datum=WGS84". Refer to PROJ.4 documentation and the General
Parameters notes for additional details.<break/>
Coordinate system objects allocated with PJ-INIT-PLUS should bedeallocated with PJ-FREE.</documentation-string></function-definition><function-definition id="cl-proj__fun__pj-cleanup-lock" name="pj-cleanup-lock" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun__parse-degrees" name="parse-degrees" package="cl-proj"><lambda-list><elt>pattern</elt><elt>str</elt><elt>&amp;key</elt><elt>dec</elt></lambda-list><documentation-string>Utility function to parse lines like: 47°7'50<break/>
If an optional key DEC is set to true converts parsed data intodecimal representation with DMS-TO-DEC function.</documentation-string></function-definition><function-definition id="cl-proj__fun__render-point" name="render-point" package="cl-proj"><lambda-list><elt>ox</elt><elt>oy</elt><elt>extent</elt><elt>size</elt><elt>&amp;key</elt><elt>(src-cs +proj=latlong +ellps=WGS84 +datum=WGS84)</elt><elt>(dst-cs +proj=utm +zone=35 +ellps=WGS84 +datum=WGS84 +units=m +no_defs)</elt><elt>(debug nil)</elt></lambda-list><documentation-string>Renders the point with given coordinates using the Proj API and
adjusts it to be displayed within a screen with given width and height.<break/><arg arg="extent">specifies the geographic extents of the original surface area that is displayed within the screen with given <code>size</code>.<break/><code>extent</code> is a plist with properties (:minx :maxx :miny :maxy) specifying geographic bounds in the source geographic system.</arg><break/><arg arg="size">is a plist specifying (:width and :height) of the resulting image in pixels.</arg><break/><arg arg="oX">Easting long?</arg><arg arg="oY">Northing lat?</arg><break/><arg arg="src-cs">Proj.4 string specifying the source coordinate system</arg><arg arg="dst-cs">Proj.4 string specifying the destination coordinate system</arg><break/><return><break/>
In case of success returns multiple values:<break/><code>pixelX pixelY relX relY pt.x pt.y</code><break/>Where <code>pixelX</code> and <code>pixelY</code> are coordinates of the givenpoint in pixels within given screen; <code>relX</code> and <code>relY</code> is arelative position of the given point; <code>pt.X</code> and <code>pt.Y</code> are
rendered coordinates of the given point.<break/></return></documentation-string></function-definition><function-definition id="cl-proj__fun__pj-is-latlong" name="pj-is-latlong" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-dalloc" name="pj-dalloc" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><variable-definition id="cl-proj__variable__+deg-to-rad+" name="+deg-to-rad+" package="cl-proj"/><function-definition id="cl-proj__fun__pj-get-def" name="pj-get-def" package="cl-proj"><lambda-list><elt>arg0</elt><elt>arg1</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-fwd" name="pj-fwd" package="cl-proj"><lambda-list><elt>arg0</elt><elt>arg1</elt></lambda-list><documentation-string>Forward cartographic projection.</documentation-string></function-definition><function-definition id="cl-proj__fun__pj-strerrno" name="pj-strerrno" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-get-errno-ref" name="pj-get-errno-ref" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun__pj-free" name="pj-free" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-pr-list" name="pj-pr-list" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-get-release" name="pj-get-release" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun__pj-datum-transform" name="pj-datum-transform" package="cl-proj"><lambda-list><elt>src</elt><elt>dst</elt><elt>point_count</elt><elt>point_offset</elt><elt>x</elt><elt>y</elt><elt>z</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-compare-datums" name="pj-compare-datums" package="cl-proj"><lambda-list><elt>srcdefn</elt><elt>dstdefn</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-latlong-from-proj" name="pj-latlong-from-proj" package="cl-proj"><lambda-list><elt>arg0</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-set-searchpath" name="pj-set-searchpath" package="cl-proj"><lambda-list><elt>count</elt><elt>path</elt></lambda-list></function-definition><function-definition id="cl-proj__fun__pj-transform" name="pj-transform" package="cl-proj"><lambda-list><elt>src</elt><elt>dst</elt><elt>point_count</elt><elt>point_offset</elt><elt>x</elt><elt>y</elt><elt>z</elt></lambda-list><documentation-string>Transform between coordinate systems.<break/>
The PJ-TRANSFORM function may be used to transform points between the
two provided coordinate systems.  In addition to converting between
cartographic projection coordinates and geographic coordinates, this
function also takes care of datum shifts if possible between the
source and destination coordinate system.  Unlike PJ-FWD and PJ-INV it
is also allowable for the coordinate system definitions (PJ *) to be
geographic coordinate systems (defined as +proj=latlong).  The x, y
and z arrays contain the input values of the points, and are replaced
with the output values.  The point_offset should indicate the spacing
the of x,y,z arrays, normally 1.  The function returns zero on
success, or the error number (also in PJ-ERRNO) on failure.<break/>
The z array may be passed as NULL if Z values are not available. <break/>
SRC: source (input) coordinate system. <break/>
DST: destination (output) coordinate system. <break/>
POINT_COUNT: the number of points to be processed (the size of the x/y/z arrays). <break/>
POINT_OFFSET: the step size from value to value (measured in
doubles) within the x/y/z arrays - normally 1 for a packed array. May
be used to operate on xyz interleaved point arrays.<break/>
X/Y/Z: The array of X, Y and Z coordinate values passed as input,
and modified in place for output. The Z may optionally be NULL.<break/>
return: The return is zero on success, or a PROJ.4 error code.<break/>Memory associated with the projection may be freed with PJ-FREE.</documentation-string></function-definition><variable-definition id="cl-proj__variable__+pj-version+" name="+pj-version+" package="cl-proj"/><function-definition id="cl-proj__fun__pj-deallocate-grids" name="pj-deallocate-grids" package="cl-proj"><lambda-list/></function-definition></external-symbols><internal-symbols><function-definition id="cl-proj__fun___var-accessor-pj-errno" name="%var-accessor-pj-errno" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun___var-accessor-pj-release" name="%var-accessor-pj-release" package="cl-proj"><lambda-list/></function-definition><function-definition id="cl-proj__fun__dec-to-merc-ex" name="dec-to-merc-ex" package="cl-proj"><lambda-list/><documentation-string>Example program from the Proj.4 API documentation.<break/>
The following program reads latitude and longitude values in decimal
degress, performs Mercator projection with a Clarke 1866 ellipsoid and
a 33° latitude of true scale and prints the projected cartesian values
in meters.<break/>
For this program, an input of '-16 20.25' would give a result of
'-1495284.21 1920596.79'.<break/>Program sources can be found at: <a a="http://trac.osgeo.org/proj/wiki/ProjAPI">the ProjAPI page</a></documentation-string></function-definition></internal-symbols></package></documentation>